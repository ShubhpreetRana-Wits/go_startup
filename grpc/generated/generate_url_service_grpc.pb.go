// proto/services/generate_url_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: grpc/proto/services/generate_url_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenerateURLService_GenerateURL_FullMethodName = "/service.GenerateURLService/GenerateURL"
	GenerateURLService_GetURL_FullMethodName      = "/service.GenerateURLService/GetURL"
	GenerateURLService_DeleteURL_FullMethodName   = "/service.GenerateURLService/DeleteURL"
)

// GenerateURLServiceClient is the client API for GenerateURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service that handles Generate URL actions
type GenerateURLServiceClient interface {
	// Method to generate a URL
	GenerateURL(ctx context.Context, in *GenerateUrlRequest, opts ...grpc.CallOption) (*GenerateUrlResponse, error)
	// Method to retrieve a URL
	GetURL(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GenerateUrlInfoResponse, error)
	// Method to delete a URL
	DeleteURL(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type generateURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerateURLServiceClient(cc grpc.ClientConnInterface) GenerateURLServiceClient {
	return &generateURLServiceClient{cc}
}

func (c *generateURLServiceClient) GenerateURL(ctx context.Context, in *GenerateUrlRequest, opts ...grpc.CallOption) (*GenerateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUrlResponse)
	err := c.cc.Invoke(ctx, GenerateURLService_GenerateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateURLServiceClient) GetURL(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GenerateUrlInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUrlInfoResponse)
	err := c.cc.Invoke(ctx, GenerateURLService_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateURLServiceClient) DeleteURL(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, GenerateURLService_DeleteURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerateURLServiceServer is the server API for GenerateURLService service.
// All implementations must embed UnimplementedGenerateURLServiceServer
// for forward compatibility.
//
// Define the service that handles Generate URL actions
type GenerateURLServiceServer interface {
	// Method to generate a URL
	GenerateURL(context.Context, *GenerateUrlRequest) (*GenerateUrlResponse, error)
	// Method to retrieve a URL
	GetURL(context.Context, *GetUrlRequest) (*GenerateUrlInfoResponse, error)
	// Method to delete a URL
	DeleteURL(context.Context, *DeleteUrlRequest) (*BaseResponse, error)
	mustEmbedUnimplementedGenerateURLServiceServer()
}

// UnimplementedGenerateURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenerateURLServiceServer struct{}

func (UnimplementedGenerateURLServiceServer) GenerateURL(context.Context, *GenerateUrlRequest) (*GenerateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateURL not implemented")
}
func (UnimplementedGenerateURLServiceServer) GetURL(context.Context, *GetUrlRequest) (*GenerateUrlInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedGenerateURLServiceServer) DeleteURL(context.Context, *DeleteUrlRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedGenerateURLServiceServer) mustEmbedUnimplementedGenerateURLServiceServer() {}
func (UnimplementedGenerateURLServiceServer) testEmbeddedByValue()                            {}

// UnsafeGenerateURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerateURLServiceServer will
// result in compilation errors.
type UnsafeGenerateURLServiceServer interface {
	mustEmbedUnimplementedGenerateURLServiceServer()
}

func RegisterGenerateURLServiceServer(s grpc.ServiceRegistrar, srv GenerateURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedGenerateURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenerateURLService_ServiceDesc, srv)
}

func _GenerateURLService_GenerateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateURLServiceServer).GenerateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateURLService_GenerateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateURLServiceServer).GenerateURL(ctx, req.(*GenerateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateURLService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateURLServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateURLService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateURLServiceServer).GetURL(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateURLService_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateURLServiceServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerateURLService_DeleteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateURLServiceServer).DeleteURL(ctx, req.(*DeleteUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerateURLService_ServiceDesc is the grpc.ServiceDesc for GenerateURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerateURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.GenerateURLService",
	HandlerType: (*GenerateURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateURL",
			Handler:    _GenerateURLService_GenerateURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _GenerateURLService_GetURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _GenerateURLService_DeleteURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/services/generate_url_service.proto",
}
